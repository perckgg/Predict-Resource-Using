import requests
import json
from datetime import datetime, timedelta
import random
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

def evaluate_prediction(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    return {"MAE": round(mae, 2), "RMSE": round(rmse, 2)}
# URL c·ªßa API (ƒë·ªïi n·∫øu c·∫ßn)
API_URL = "http://localhost:8000/predict"
true_cpu = []
true_ram = []
def generate_test_data(num_records=6):
    """T·∫°o d·ªØ li·ªáu test ng·∫´u nhi√™n nh∆∞ng h·ª£p l√Ω"""
    records = []
    base_time = datetime.now()
    
    for i in range(num_records):
        scantime = (base_time - timedelta(minutes=5*i)).isoformat()
        
        record = {
            "scantime": scantime,
            "cpu": {
                "utilization": random.uniform(10, 90),  # % CPU usage
                "processes": random.randint(50, 300)   # S·ªë process
            },
            "ram": {
                "percent": random.uniform(20, 80)       # % RAM usage
            }
        }
        records.append(record)
        true_cpu.append(record["cpu"]["utilization"])
        true_ram.append(record["ram"]["percent"])
    
    return {"records": records}

def test_predict_api():
    """Ki·ªÉm th·ª≠ API predict"""
    print("=== B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ API predict ===")
    
    # 1. T·∫°o d·ªØ li·ªáu test
    test_data = generate_test_data()
    print("\nD·ªØ li·ªáu test g·ª≠i ƒë·∫øn API:")
    print(json.dumps(test_data, indent=2))
    
    # 2. G·ªçi API
    try:
        response = requests.post(API_URL, json=test_data)
        response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
        
        # 3. Ki·ªÉm tra k·∫øt qu·∫£
        result = response.json()
        print("\nK·∫øt qu·∫£ nh·∫≠n ƒë∆∞·ª£c t·ª´ API:")
        print(json.dumps(result, indent=2))
        
        # Ki·ªÉm tra c·∫•u tr√∫c response
        assert "predicted_cpu" in result, "Thi·∫øu predicted_cpu trong response"
        assert "predicted_ram" in result, "Thi·∫øu predicted_ram trong response"
        assert len(result["predicted_cpu"]) == 6, "S·ªë l∆∞·ª£ng d·ª± ƒëo√°n CPU kh√¥ng ƒë√∫ng"
        assert len(result["predicted_ram"]) == 6, "S·ªë l∆∞·ª£ng d·ª± ƒëo√°n RAM kh√¥ng ƒë√∫ng"
        
        print("\n‚úÖ Ki·ªÉm th·ª≠ th√†nh c√¥ng! Response h·ª£p l·ªá.")
        cpu_metrics = evaluate_prediction(true_cpu, result["predicted_cpu"])
        ram_metrics = evaluate_prediction(true_ram, result["predicted_ram"])
        print("\nüéØ ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c:")
        print("CPU:", cpu_metrics)
        print("RAM:", ram_metrics)
    except requests.exceptions.RequestException as e:
        print(f"\n‚ùå L·ªói khi g·ªçi API: {e}")
        if hasattr(e, 'response') and e.response:
            print(f"Chi ti·∫øt l·ªói: {e.response.text}")
    except AssertionError as e:
        print(f"\n‚ùå Ki·ªÉm th·ª≠ th·∫•t b·∫°i: {e}")

if __name__ == "__main__":
    test_predict_api()